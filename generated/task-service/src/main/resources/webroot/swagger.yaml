openapi: '3.0.2'
info:
  title: Task APIs
  version: '1.0'
servers:
  - url: http://localhost:7024

paths:

  /task/book/add: 
    post:
      tags:
        - "Task Book"
      operationId:  taskBookAdd
      requestBody:
        $ref: "#/components/requestBodies/RequestBodyBook"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"
  
  /task/book/update:
    post:
      tags:
        - "Task Book"
      operationId:  taskBookUpdate
      requestBody:
        $ref: "#/components/requestBodies/RequestBodyBook"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /task/book/delete:
    post:
      tags:
        - "Task Book"
      operationId:  taskBookDelete
      requestBody:
        $ref: "#/components/requestBodies/RequestBookId"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /task/book/get:
    post:
      tags:
        - "Task Book"
      operationId:  taskBookGet
      requestBody:
        $ref: "#/components/requestBodies/RequestBookId"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /task/book/get-list:
    post:
      tags:
        - "Task Book"
      operationId:  taskBookGetList
      requestBody:
        $ref: "#/components/requestBodies/RequestListParams"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /task/book/get-all:
    post:
      tags:
        - "Task Book"
      operationId:  taskBookGetAll
      requestBody:
        description: "Default get all list"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /task/book/get-summary-list:
    post:
      tags:
        - "Task Book"
      operationId:  taskBookGetSummaryList
      requestBody:
        $ref: "#/components/requestBodies/RequestSortFilterList"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"


  /task/author/add: 
    post:
      tags:
        - "Task Author"
      operationId:  taskAuthorAdd
      requestBody:
        $ref: "#/components/requestBodies/RequestBodyAuthor"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"
  
  /task/author/update:
    post:
      tags:
        - "Task Author"
      operationId:  taskAuthorUpdate
      requestBody:
        $ref: "#/components/requestBodies/RequestBodyAuthor"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /task/author/delete:
    post:
      tags:
        - "Task Author"
      operationId:  taskAuthorDelete
      requestBody:
        $ref: "#/components/requestBodies/RequestAuthorId"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /task/author/get:
    post:
      tags:
        - "Task Author"
      operationId:  taskAuthorGet
      requestBody:
        $ref: "#/components/requestBodies/RequestAuthorId"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /task/author/get-list:
    post:
      tags:
        - "Task Author"
      operationId:  taskAuthorGetList
      requestBody:
        $ref: "#/components/requestBodies/RequestListParams"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /task/author/get-all:
    post:
      tags:
        - "Task Author"
      operationId:  taskAuthorGetAll
      requestBody:
        description: "Default get all list"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /task/author/get-summary-list:
    post:
      tags:
        - "Task Author"
      operationId:  taskAuthorGetSummaryList
      requestBody:
        $ref: "#/components/requestBodies/RequestSortFilterList"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"


  /task/book-author/add: 
    post:
      tags:
        - "Task BookAuthor"
      operationId:  taskBookAuthorAdd
      requestBody:
        $ref: "#/components/requestBodies/RequestBodyBookAuthor"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"
  
  /task/book-author/update:
    post:
      tags:
        - "Task BookAuthor"
      operationId:  taskBookAuthorUpdate
      requestBody:
        $ref: "#/components/requestBodies/RequestBodyBookAuthor"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /task/book-author/delete:
    post:
      tags:
        - "Task BookAuthor"
      operationId:  taskBookAuthorDelete
      requestBody:
        $ref: "#/components/requestBodies/RequestBookAuthorId"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /task/book-author/get:
    post:
      tags:
        - "Task BookAuthor"
      operationId:  taskBookAuthorGet
      requestBody:
        $ref: "#/components/requestBodies/RequestBookAuthorId"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /task/book-author/get-list:
    post:
      tags:
        - "Task BookAuthor"
      operationId:  taskBookAuthorGetList
      requestBody:
        $ref: "#/components/requestBodies/RequestListParams"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /task/book-author/get-all:
    post:
      tags:
        - "Task BookAuthor"
      operationId:  taskBookAuthorGetAll
      requestBody:
        description: "Default get all list"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"

  /task/book-author/get-summary-list:
    post:
      tags:
        - "Task BookAuthor"
      operationId:  taskBookAuthorGetSummaryList
      requestBody:
        $ref: "#/components/requestBodies/RequestSortFilterList"
      responses:
        200:
          $ref: "#/components/responses/Success"
        404:
          $ref: "#/components/responses/Error"


components:
  schemas:

    bookId:
      type: object
      properties:
        book_id:
          type: integer
          nullable: true
          format: int64
      required:
        - book_id

    Book:
      allOf:
        - $ref: "#/components/schemas/bookId"
        - type: object
          properties:
            name:
              type: string
              nullable: true
            language:
              type: string
              nullable: true
            published_date:
              type: string
              nullable: true

    authorId:
      type: object
      properties:
        author_id:
          type: integer
          nullable: true
          format: int64
      required:
        - author_id

    Author:
      allOf:
        - $ref: "#/components/schemas/authorId"
        - type: object
          properties:
            full_name:
              type: string
              nullable: true
            bio:
              type: string
              nullable: true

    bookAuthorId:
      type: object
      properties:
        book_author_id:
          type: integer
          nullable: true
          format: int64
      required:
        - book_author_id

    BookAuthor:
      allOf:
        - $ref: "#/components/schemas/bookAuthorId"
        - type: object
          properties:
            author_id:
              type: integer
              nullable: true
            book_id:
              type: integer
              nullable: true
    Request:
      required:
        - jsonrpc
        - id
        - params
      properties:
        jsonrpc:
          type: string
          enum:
            - "2.0"
          example: "2.0"
        id:
          type: integer
          format: int64
          example: 10
        params:
          type: object
    Response:
      properties:
        id:
          type: integer
          format: int64
        result:
          type: object
          nullable: true
          example: null
        error:
          type: object
          nullable: true
          example: null
    ResponseSuccess:
      allOf:
        - $ref: "#/components/schemas/Response"
        - type: object
          properties:
            result:
              type: object
              nullable: false
              example: {}
    ResponseError:
      allOf:
        - $ref: "#/components/schemas/Response"
        - type: object
          properties:
            error:
              type: object
              nullable: false
              properties:
                code:
                  type: integer
                  format: int64
                  nullable: false
                  example: 1000
                message:
                  type: string
                  nullable: false
                  example: "any error response text message"
              example: { code: 1000, message: "any error response text message"}
    listParams:
      type: object
      properties:
        skip_count:
          type: integer
          nullable: true
          example: 0
        page_size:
          type: integer
          nullable: true
          example: 20

  requestBodies:
    RequestSortFilterList:
      description: "Standard get ordered sorted list Request"
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Request'
              - type: object
            properties:
              params:
                allOf:
                  - type: object
                    properties:
                      sort_expression:
                        type: string
                        nullable: true
                      filter_condition:
                        type: string
                        nullable: true
                  - $ref: '#/components/schemas/listParams'
    RequestListParams:
      description: "Standard get list"
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Request'
              - type: object
                properties:
                  params:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/listParams'
    RequestBookIdListParams:
      description: "Standard get list by Book Request"
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Request'
              - type: object
                properties:
                  params:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/bookId'
                      - $ref: '#/components/schemas/listParams'
    RequestBookId:
      description: "Standard Book Request"
      required: true
      content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Request'
                - type: object
                  properties:
                    params:
                      $ref: '#/components/schemas/bookId'
    RequestBodyBook:
      description: "Add Book Request"
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Request'
              - type: object
                properties:
                  params:
                    type: object
                    properties:
                      book:
                        $ref: '#/components/schemas/Book'
    RequestAuthorIdListParams:
      description: "Standard get list by Author Request"
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Request'
              - type: object
                properties:
                  params:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/authorId'
                      - $ref: '#/components/schemas/listParams'
    RequestAuthorId:
      description: "Standard Author Request"
      required: true
      content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Request'
                - type: object
                  properties:
                    params:
                      $ref: '#/components/schemas/authorId'
    RequestBodyAuthor:
      description: "Add Author Request"
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Request'
              - type: object
                properties:
                  params:
                    type: object
                    properties:
                      author:
                        $ref: '#/components/schemas/Author'
    RequestBookAuthorIdListParams:
      description: "Standard get list by BookAuthor Request"
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Request'
              - type: object
                properties:
                  params:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/bookAuthorId'
                      - $ref: '#/components/schemas/listParams'
    RequestBookAuthorId:
      description: "Standard BookAuthor Request"
      required: true
      content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Request'
                - type: object
                  properties:
                    params:
                      $ref: '#/components/schemas/bookAuthorId'
    RequestBodyBookAuthor:
      description: "Add BookAuthor Request"
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Request'
              - type: object
                properties:
                  params:
                    type: object
                    properties:
                      book_author:
                        $ref: '#/components/schemas/BookAuthor'
  responses:
    Success:
      description: "Success Response"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseSuccess"
    Error:
      description: "Error response"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ResponseError"